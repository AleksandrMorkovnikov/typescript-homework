// Задание 1. Ошибка в коде
// Что нужно сделать:
// Разработчики не только пишут код сами, но и работают с готовым кодом коллег. В этом задании необходимо:
// -Найти и исправить ошибку в чужом коде.
// -Написать небольшой сопроводительный текст, в котором вы:
// объясните причину возникновения ошибок;
// опишете, как TypeScript помогает их избежать.
// -Если объяснение покажется вам достаточно очевидным — это нормально, так и должно быть. Цель подобного рассуждения — научиться анализировать принципы работы с кодом, так как важно не только уметь писать хороший код, но и понимать, как он работает, зачем и почему стоит выбрать тот или иной способ решения задачи.
// Код:
var actor = {
    name: 'Michael',
    firstName: 'Ivanov',
    country: 'Russia',
    city: 'Makhachkala',
    hasOskar: false,
    filmsCount: 10,
    // age: '14', Ошибка была в этой строке. Задано строчное значение вместо числового что ломает алгоритм вычисления, и "склеивает" элементы вместо того чтобы сложить числа. 
    age: 14,
    languages: ['RU-ru', 'EN-us', 'TR-tr'],
};
var howOldWillBeActorAfterTwentyYears = function (actor) {
    return actor.age + 20;
};
console.log(howOldWillBeActorAfterTwentyYears(actor));
// Примечание:
// Мы ещё не касались типизации объектов, но приведённый пример подробно рассмотрен далее в курсе.
// Критерии оценки:
// Принято: ошибка в коде исправлена, присутствует корректное рассуждение.
// На доработку: ошибка не исправлена и/или рассуждение отсутствует.
// Задание 2. Ошибка в коде — 2
// Что нужно сделать:
// Разработчики не только пишут код сами, но и работают с готовым кодом коллег. В этом задании необходимо:
// -Найти и исправить ошибку в чужом коде.
// -Написать небольшой сопроводительный текст, в котором вы объясните причину возникновения ошибки.
// -Если объяснение покажется вам достаточно очевидным — это нормально, так и должно быть.
// Код:
document.addEventListener('click', function (e) {
    var coords = [e.clientX, e.clientY]; // Неправильно написано свойство, должно быть clientX/Y
    console.log("Point is ".concat(coords[0], ", ").concat(coords[1])); // Нет бэктиков чтобы вывести clg как строку с включенными в нее данными из функции
});
// Критерии оценки:
// Принято: ошибка исправлена, присутствует корректное рассуждение.
// На доработку: ошибка не исправлена и/или рассуждение отсутствует.
// Задание 3. Использование нетипизированного кода
// Что нужно сделать:
// Представьте, что вас подключили к проекту, над которым работали другие разработчики. Вы увидели в коде проекта два фрагмента, назначение которых нигде не объяснено. Предположите, какую функцию выполняет каждая часть кода и для каких целей их надо применить.
// Первая часть кода:
function someFunc1(data) {
    return data.reduce(function (acc, current) {
        acc += Number(current.age > 18 && current.isMale);
    }, 0);
}
;
function someFunc(data) {
    return data.reduce(function (acc, current) {
        return acc + Number(current.age > 18 && current.gender === 'male');
    }, 0);
}
;
// ошибка - не было закрывающей скобки, та же проблема с сохранением результата
// функция аналогична первой, но написана с типизацией typescript
// Критерии оценки:
// Принято: в рассуждениях присутствуют корректные тезисы.
// На доработку: корректные тезисы отсутствуют.
// Задание 4. Написание кода
// Что нужно сделать:
// Используя примитивную типизацию с помощью TypeScript, напишите код, который:
// принимает строку из нескольких слов, разделённых пробелами,
// возвращает строку со словами в отзеркаленном виде, причём последовательность слов должна быть сохранена.
// Пример:
// "Это пример!" ==> "отЭ !ремирп"
// Советы и рекомендации
// Проверьте работу кода не только на фразе «Это пример!», но и на менее очевидных граничных случаях. Например, при вводе только пробелов без слов.
function mirror(input) {
    return input
        .split(' ')
        .map(function (words) { return words.split('').reverse().join(''); })
        .join(' ');
}
var start = "Сейчас эта надпись будет отзеркалена";
var finish = mirror(start);
console.log(finish);
// Критерии оценки
// Принято:
// Код корректно работает в примере и других случаях (например, при отсутствии слов).
// Использована типизация примитивов.
// Аргументы и возвращаемое значение функции типизированы.
// На доработку:
// Код не проходит все кейсы.
// В коде не использована типизация.
// Задание 5. Алгоритмическая задача
// Что нужно сделать:
// Используя примитивную типизацию с помощью TypeScript, напишите код, который:
// Принимает число.
// Возводит в квадрат все ЦИФРЫ этого числа и конкатенирует их, то есть склеивает обратно в одно число и возвращает его.
// Если число отрицательное — функция должна вернуть его обратно.
// Пример:
// 9119 → 9 1 1 9 → 81 1 1 81 → 811181
function square(input) {
    if (input < 0) {
        return input;
    }
    var result = input
        .toString()
        .split('')
        .map(function (calc) { return Math.pow(Number(calc), 2); })
        .join('');
    return Number(result);
}
console.log(square(12344));
// Критерии оценки:
// Принято:
// Функция корректно обрабатывает целые и отрицательные числа.
// Использована типизация примитивов.
// Аргументы и возвращаемое значение функции типизированы.
// На доработку:
// Код не проходит все кейсы.
// В коде не использована типизация.
// Задание 6. Алгоритмическая задача — 2
// Что нужно сделать:
// Используя примитивную типизацию с помощью TypeScript, напишите код, который:
// принимает число,
// возвращает его цифровой корень.
// Цифровой корень (также известен как корень по основанию 10) для положительного целого числа определяется как сумма его цифр до тех пор, пока не останется одна цифра.
// Например, для числа 942 цифровой корень вычисляется следующим образом: 9 + 4 + 2 = 15, затем 1 + 5 = 6. Получается, что цифровой корень числа 942 равен 6. То же самое справедливо и для числа 493193: 4 + 9 + 3 + 1 + 9 + 3 = 29, затем 2 + 9 = 11, затем 1 + 1 = 2, поэтому цифровой корень числа 493193 равен 2.
function numberRoot(input) {
    while (input > 10) {
        input = input
            .toString()
            .split('')
            .map(Number)
            .reduce(function (num1, num2) { return num1 + num2; }, 0);
    }
    return input;
}
console.log(numberRoot(12443));
